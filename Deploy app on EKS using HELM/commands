

Step #1:Install Helm on Ubuntu
Download the gpg key
curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
Install the apt-transport-https 
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
We need to update your system packages:
sudo apt-get update
Now lets Install helm:
sudo apt-get install helm

Step #2:Install AWS CLI on Ubuntu
Download the aws cli bundle using below command
 sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
Extract the aws cli bundle setup
sudo unzip awscliv2.zip
Configure the AWS CLI on Ubuntu
sudo ./aws/install
Verify the AWS CLI version
aws --version

Step #3:Install eksctl CLI tool for creating EKS Clusters on AWS
Use below command to download eksctl CLI tool for creating EKS Clusters on AWS, To download latest eksctl tool visit eksctl official github page
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
move eksctl setup to /usr/local/bin directory
sudo mv /tmp/eksctl /usr/local/bin 
To check eksctl version
eksctl version

Step #4:Install kubectl binary with curl
Download the latest release with the command:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
Install kubectl
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
Test to ensure the version you installed is up-to-date:
kubectl version --client
Output:
Client Version: version.Info{Major:"1", Minor:"27", GitVersion:"v1.27.3", GitCommit:"25b4e43193bcda6c7328a6d147b1fb73a33f1598", GitTreeState:"clean", BuildDate:"2023-06-14T09:53:42Z", GoVersion:"go1.20.5", Compiler:"gc", Platform:"linux/amd64"}
Kustomize Version: v5.0.1

Step #5:Create AWS Access Key ID and Secret Access Key 

Step #6:Configure AWS CLI

Step #7:Create Amazon EKS cluster using eksctl
Create Create EKS Cluster in AWS using eksctl
eksctl create cluster --name demo-chintandevops --region us-east-2 --version 1.27 --nodegroup-name linux-nodes --node-type t2.micro --nodes 2

Step #8:Check nodes in EKS cluster
To check the details about your node run the below command
kubectl get nodes

Step #9:Deploy Helm Chart on EKS cluster

helm create chhelmchart

You can ensure that your kubectl command line tool is correctly configured to communicate with your EKS cluster with the following command:
kubectl config current-context
You should see a response with the Amazon Resource Name (ARN) for your EKS cluster. To install the application with Helm/Deploy Helm Chart on EKS cluster, run the helm install command in the directory of the chart.
Cd chhelmchart
helm install chhelmchart .

This will deploy your application, and to verify that the pod is running successfully, you can use kubectl to fetch the pods in the default namespace of your EKS cluster.
kubectl get pods

Once you’ve confirmed that the pod is running, the next step will be to upgrade your application. This upgrade will involve an update to the configuration of the service. You can modify the service type from ClusterIP to LoadBalancer in the values.yaml file.
This will make the application publicly accessible. You can then save the file and run the helm upgrade command.
helm upgrade chhelmchart .

Once the upgrade is complete, you can get the domain name (listed under External IP) from the service. Keep in mind, the load balancer typically takes a few minutes to get fully setup and configured.

kubectl get svc
ubuntu@ip-172-31-25-142:~/chhelmchart$ kubectl get svc
NAME          TYPE           CLUSTER-IP      EXTERNAL-IP                                                               PORT(S)        AGE
chhelmchart   LoadBalancer   10.100.112.48   a71d9ab11d27a4e6685dc0b1c97fc6d1-1699670822.us-east-2.elb.amazonaws.com   80:30004/TCP   4m39s
kubernetes    ClusterIP      10.100.0.1      <none>                                                                    443/TCP        20m

